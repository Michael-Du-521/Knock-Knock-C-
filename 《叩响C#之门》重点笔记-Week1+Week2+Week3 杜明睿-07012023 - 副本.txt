2023/06/11
1.1 C#简介
C#是.NET平台的主打语言
C#对于可以实现同种功能的语法仅保留一种最常用的写法。
C#是面向对象语言，支持单一继承。
Visual Studio 工具-导入和导出设置-重置所有设置-下一步-Visual C#开发设置
Visual Studio 中 用solution来组织多个project
1.4 编译

把数以万计的简单指令链接在一起，就可以准确而高效的完成复杂工作。
机器语言-汇编语言-高级语言
源代码---编译器--->机器语言
C#源代码---初次编译--->MSIL(微软中间语言)---二次编译(JIT即时编译)--->机器语言


2023/06/12
十进制 0 1 2 3 4 5 6 7 8 9

八进制 0 1 2 3 4 5 6 7 11 12

二进制 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110

（1）多进制转二进制：除以二取余法,因为对于二进制，大于等于2的数都应该进位，只有0和1能够作为余数保留下来，因此通过反复除2，直至被除数被分解为0或1为止。



1.6数据和内存

数据以二进制的形式存放在内存中，
内存是由众多具有两个状态的电子开关组成的。电子开关打开时，代表1；闭合时，代表0。每个电子开关成为一个比特（bit）或位

一般用8个二进制位组成一个字节（Byte），一个字节可以表示0~255之间的整数，即[0,255]
计算机内存是由很多排列整齐的字节组成，为了管理方便，每个字节都有相应的位置编号，即该字节的地址。通过地址可以找到内存中任何一个字节的内容。
1 KB = 1024 B
1 MB = 1024 KB
1 GB = 1024 MB

2 变量

程序的核心是处理数据.
赋值运算符（=）的作用是把在=右侧的表达式值，写入变量所在的内存空间。
使用变量前必须先声明变量。
正数的补码是它本身，
负数的补码
	1将该数的绝对值表示成二进制形式
	2按位取反
	3再加1

2.1.3 short 型 => 仅占用2个字节
2.1.5 uint 型 =>无符号位
Ctrl+F5 启动编译，如果编译阶段没有错误，则启动程序。
2.2实数型变量
float 变量在内存中占4个字节(32位)
实数型数据=符号位+小数部分+指数

备注：1 Byte =8 bits

2.3.5 ASCII and Unicode

Alt + 小键盘输入29482=> “猪” 国标码

{ <= alt + 123 ASCII 码 
|
}
~
2.3.6 转义字符
\' 单引号
\" 双引号
\\ 反斜杠
\0 空
\a 
\b
\f
\n
\r
\t
\v

2.3.7 @控制符

@可以使其修饰的引号内容原样输出，不理会其中的转移字符。

2.4 变量的格式化输出
            #region MyRegion
            int i = 360;
            int j = 60;
            Console.WriteLine(  "{0,6}\n +{1,3}\n--------\n{2,6}",i,j,i+j);
            #endregion

{i，w} 其中i是参数索引，w是宽度值，正值代表右对齐，负值代表左对齐，所在行字符不足宽度值时，以空格补齐。

2.5 变量的命名规则

变量的第一个字符必须是字母、下划线或@
变量不可以与关键字重名。

    1 默认为 int 常量
    1.0 默认为 double 常量
    89L 是 long 型
    3.14f 是float 型

3.1 算数运算符

int n = 5/2; // n=2 因为在C#中两个整数相除的结果仍然为整数，所以5/2的小数部分被舍去了。
3.2 自加运算符

后置自加符 //先赋值（运算、输出），再自增。
前置自加符 //先自增（运算、输出），再赋值。

3.4 优先级

前置自加自减操作符>乘法、除法、取余数>加、减>赋值>后置自加自减操作符
过多的嵌套括号，会使得代码变得难以阅读和修改，因此最好把复杂的表达式分解为数个简单的表达式。

算数运算符的优先级高于关系运算符

3.5 类型转换

隐式转换：把取值范围较小的类型转换为取值范围较大的类型。
显式转换： 语法是再源数据前的括号内添加目标类型。 进行显式转换时，int型变量仅将后面16为原封不动的复制给short型变量，前16位数据一将丢失.

将实型数据赋给整型变量，会舍弃实数的小数部分。

int n =8226589;
short s = checked((short)n);

3.5.3 字符串与数值之间的转换
Convert.ToDouble() 将字符串转化为 double 类型
Convert.ToInt32() 将字符串转换为 int 类型
转换前提是，该输入字符串必须符合数值的有效表达形式

4流程控制

只需要三种控制结构就能写出所有程序 1966年由两位计算机科学家证明
-顺序结构：按书写顺序，从第一条语句开始，按顺序逐句进行。
-选择结构：
    --嵌套选择结构 可以分几次判断，逐步缩小范围。
    --switch语句

数据结构 + 算法（做什么和怎么做、程序框图是算法的体现） = 程序

4.3.2 逻辑运算符

!(x%2==0) x不是偶数

在逻辑表达式的求解中，当运算进行到一半即可判断真假时候，后面的运算将不再执行。

06222023
4.5 循环结构
-while 先判断循环条件的真假，若循环条件为真，则执行循环体内的语句；执行完循环体后，再次检查条件，反复进行，知道循环条件为假时停止。
-do while 先执行一次循环体，然后再判断循环条件
4.5.3 for 语句

4.6
break 可以使得流程跳出switch ； break 还可以跳出循环语句。{中断整个循环}
continue 中断本圈循环

“复杂的事物往往由几种简单的事物组合而成”

5.1 枚举
5.2 结构体
所有定义类型的代码都再主函数外进行编写

6.5递归调用
-初始值
-递推公式（关系）

递归调用都可以用循环语句来表示

6.6.1 变量的作用域
同一函数中的变量不能同名，但是不同函数中的变量可以同名，因为它们的作用域不同，互不干扰。
在编译阶段，变量的名字都被转化为数字编码。

7 面向对象编程

-结构化编程（面向过程）：将较大的任务分解为若干小任务，每个小任务均由函数实现。
程序包含 数据和函数
面向过程编程的基本要点时自顶向下的按照功能把软件分解为不同的模块，并用函数实现这些模块。
-面向对象编程：把事物编写成类，在类中，用数据表示事物的属性，用函数实现事物的行为。

成员变量 Member Variabel (Field) =>类的属性

成员函数 Member Function (Method)=>类的行为


private  私有成员=> 编译器不允许类以外的任何代码访问他们。

只要保持 public 公有成员（接口）不变，对类内部进行的任何优化改造都不会对外界产生影响。

设计良好的类，既能保持其封装性，又能向外界提供足够的接口。

属性可以看作特殊的函数，但属性的使用方式和变量完全相同。

当自定义构造函数后，默认构造函数就失效了，若想要继续使用无参数构造函数，必须显示定义。

实例变量 通过 对象名 引用
静态变量 通过 类名 引用

readonly 常量 在类的具体对象中是固定的常数，但在不同对象中可以有不同的值。 // public readonly int roomNumber;

两个int型数据相除的结果仍旧为int型数据。

.Net 类库为WriteLine()函数设计了19个重载函数。

重载函数和重载运算符的调用原则都是参数的最佳匹配。如果找不到直接匹配的运算符，编译器会尝试通过隐式转换找到匹配的运算符。
每个对象都有一个指向自己的this引用符。

因为函数内部的变量会屏蔽掉外部的同名变量，所以为了在SetTime() 函数内部使用 重名的 成员变量， 必须this 关键字显式地访问 类的成员变量。

C# 把整型、实型、布尔型、字符型等简单数据和结构体储存在栈中，最先入栈的数据最后弹出，因此先入栈的数据的作用域总比后入栈的要长，后入栈的数据的作用域嵌套在先入栈的数之中。
C# 把类的成员变量储存在堆(Heap)上。

创建对象的过程，现在堆中创建 对象， 然后在栈中 创建一个指向堆中对象的引用符（引用符是该对象在堆中的地址）。

可以把基类中的函数设计为 virtual 虚函数，然后在派生类中 Override 重写该函数

重载发生在同一个类中的同名函数之间，
重写发生在基类和派生类的同名函数之间。

每个对象都有一个指向自身的 this 引用符，
每个对象也有一个指向基类的 base 引用符。

创建对象时，系统先调用基类的构造函数，初始化基类的变量，然后调用派生类的构造函数，初始化派生类的变量，是一个有基类向派生类逐步构建的过程。
删除对象时，系统先调用派生类的析构函数，销毁派生类的变量，然后调用基类的析构函数，销毁基类变量，是一个由派生类向基类逐步销毁的过程。

C#中所有类都直接或者间接继承于Object类，在定义类时，如果没有指定基类，那么编译器就会自动使它继承于Obejct类。


一个基类的引用符，可以指向多种派生类对象，这种现象叫做多态(Polymorphism)
所有派生类二点对象都可以看作基类的对象

10.4 is运算符

由基类向派生类转换的过程称为向下转型

is 运算符用来判断对象是否是某种类型
as 运算符用于执行两个引用类型之间的显示转换，若类型不兼容则转换的结果为null，不会抛出异常。

10.6 接口

接口只规定系统具有哪些成员以及每个成员的功能

C#中属性的命名为大写 例如：
public decimal Balance
{
    get
    {
        return balance;
    }
}

10.7 类关系图

11.1 .NET框架
（1）common Language Runtime 负责运行代码，确保代码的安全性和准确性。又负责管理内存、线程调度等服务。
（2）Framework Class Library 是内容丰富的框架基础类库
（3）common type system 通用类型系统 定义了一系列标准的基本数据类型和内容丰富的类型层次结构
（4） common language specification 公共语言规范
C#语言要经过两次编译：
（1）程序员写好源码之后进行第一次编译，将源代码编译为微软中间语言microsoft intermediate language,应用软件是以msil代码形式储存的。
（2）当用户运行软件时，CLR将微软中间语言（mil）编译为机器语言。 中间语言基于强数据类型，及每一个变量都有明确的数据类型，虽然牺牲了部分性能，但是会在语言的互操作性、垃圾回收、安全性、以及应用程序域等方面获得更多好处。
msil微软中间语言是不同语言编写的组件最终都被编译成的中间语言，最后通过中间语言的二次编译实现应用的业务逻辑。

11.6 命名空间
命名空间用于组织类，避免不同类库之间的重名问题。
完全限定名 (Fully qualified Name) 可以确认 一个类的归属
System.Console.WriteLine();

充分地利用帮助文档是学习编程的好方法

11.7 装箱和拆箱
值类型变量储存在栈上；
引用型变量储存在堆上，实际上，值类型可以转换为引用类型。

装箱操作 把值类型数据 打包到 引用型变量。
拆箱操作 需要用到显式转换 
int i = (int) obj; //拆箱

11.8 对象的相等

ReferenceEquals() 是一个静态函数，用来测试两个引用符是否指向同一个对象，即两个引用夫是否包含相同的内存地址。

实例 Equals() 是一个虚函数， 默认状态下只进行引用比较。 但是我们可以在派生类中重新该函数，实现值比较。如果两个对象是值类型，则判断两个值是否相等；如果两个对象是引用型，则判断两个对象的数据成员是否相等。

静态 Equals() 通过调用实例版函数进行比较 只是在调用 objA.Equals（objB） 前， 会先检查两个参数是否均为空引用，如果均为空引用则返回true，如果一个为空但另一个不为空，则返回false。

12 异常

在浮点数运算中，除数为零是合法的，这种计算得到的值是无穷大；如果分子、分母同时为零，结果记录为double.NaN
产生异常后CLR会在try块后面寻找匹配的catch块，并执行该块中的语句。

可能发生异常的代码放在 try块里；
异常处理代码放在 catch块中；
不管是否发生异常 程序都要执行finally块中的代码。

如果try块后面有catch块，则finally块是可以选的；
如果try块后面没有catch块，则finally块是必须的。

try语句是由 try块、若干catch块和finally块的总和。

.NET中预定义的异常类都派生于SystemException类；
用户自定义的异常类都应该派生于ApplicationException类。

若程序员不给catch块指定异常类型，它可以捕获任何异常。

Exception类，拥有Message 和 StackTrace 公共属性。 Message 用于描述异常的原因；StackTrace 用于描述异常的堆栈信息，即发生异常的位置。

13 Windows 窗体编程

图形用户界面（GUI）
窗体（Form）：可以视为放置组件的容器(Container)
组件（Component）
-标题栏
-菜单栏
-下拉式列表框
-工具栏
-控制按钮（Control Box）
-状态栏
-视图区
-滚动条
-边框(Border)

#按钮
#文本框
#复选框

#Timer组件

可见的组件，我们称之为控件（Control）

partical 关键字 允许 把同一个类分别定义在多个源文件中。



16 委托与事件

委托(Delegate) 将一个函数作为另一个函数的参数
delegate void AnimalPlay(string name);
delegate 关键字 实际上 定义了 一种 “函数类型”， 它明确了函数的 参数类型和返回值类型。
当我们需要把某个函数作为参数时，首先要把它转换为委托实例。
以委托为参数的函数具有一定的通用性。
利用委托可以实现以“函数”为参数，提高程序的通用性。

委托用关键字 delegate 声明，实际上创建一种委托相当于创建一个从System.Delegate 派生出来的类，类中有一个调用列表，列表中包含着被委托函数的引用。
16.2 多播委托（Multicast Delegate）
我们可以向一个委托中注册多个函数。
AnimalPlay animalsAct = new AnimalPlay(DogPly);
animalsAct += new AnimalPlay(CatPlay);
animalsAct =+ new AnimalPlay(LionPlay);

当使用animalsAct 委托时，这三个函数被依次调用。

利用匿名函数可以直接把“代码块”定义成委托，二不需要实现定义函数。
Integrand f3 = deldgate(double x) {
    return 3*x+5;
}

double result3= DefiniteIntegrate(2,8,f3);
Console.WriteLine("result3 = {0}",result3);

当外层变量被匿名函数捕获时，它们的生存周期将延长至委托被销毁为止。
int a =3;
int b =5;
Integrand f4 = delegate(double x){
    return a * x +b ;
}// b 被匿名函数捕获

16.4 事件处理机制

触发事件(raise event)

单击按钮，触发Click事件，系统会调用该事件的处理程序myButton_Click。我们把触发事件的对象称为事件的发送则（EventSender）,响应事件的对象成为事件的接收者(EventReceiver).
.NET 以委托机制运行事件处理程序。

事件 实际上 就是 一个委托实例，它和变量、属性等一样都是类的数据成员，只是声明事件时，必须用event关键字。
因为 事件 本质上就是一个委托，所以我们可以在一个事件中注册多个事件处理程序，当事件发生时，系统就会依次调用事件中所有的处理程序。

16.4.2 自定义事件

创建一个事件驱动的程序步骤
1.声明关于事件的委托；
2.声明事件；
3.编写触发事件的函数；
4.创建事件处理程序；
5.注册事件处理程序；
6.在适当的条件下触发事件；

18 文件 和 流
File 类 中所有的方法都是静态的
FileInfo 类 的成员方法都是非静态的，使用方法前需要先创建一个FileInfo类的对象，然后通过FileInfo对象来调用方法。
a directory is a container used for organizing files,
while a path is the textual representation of the route to access a file or directory within a file system.
Directory类中的方法都是静态的。

DirectoryInfo类的成员方法都是非静态的，使用前需要先创建一个DirectoryInfo类的对象。当频繁操作某目录时，使用DirectoryInfo类的效率会更高。

Environment.CurrentDirectory 获取程序所在目录的路径

18.2 基于流的文件操作

.NET设计了称为 流（Stream）的类来读写文件。
一旦操作者在系统中打开一个文件，它就和一个流相关联。
通过 流 这种专门用于传输数据的工具来传输数据，就可以使得传输工具和数据源分离开来，从而更容易切换数据源， 更容易实现在不同环境下代码的重用。
要使用 流 ，必须先创建一个 流 的对象。

获取 文件 对应的流的两种办法

FileStream fileStream = myFile.OpenWrite();
FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read);

using 语句:using 后括号内 创建了一个流对象 ， 然后在using 后的语句块中使用 该流对象（或任何包含Dispose（）方法且需要及时销毁的对象）。当退出 using 语句时， 系统会自动关闭 该流对象。它适用于 需要及时释放资源的代码。
using 语句实际上是对 try语句的封装

using(FileStream fileStream = File.OpenText(path))
{
    byte[] data ={100,101,102,103};
    fileStream.Write(data,0,data.Length);
}

A boolean value typically only needs one bit to represent its value,
but due to the way that memory addressing works, it is usually not possible to allocate only one bit of memory.
Therefore, a byte is often used to store a single boolean value, with 7 bits unused.

实际上,BinaryReader和BinaryWriter本身并不是独立的流，它们是对其他流的包装，所以创建BinaryReader和BinaryWriter对象时，需要传给它们一个FileStream对象，对BinaryReader和BinaryWriter的操作，就是对FileStream的操作。

19 字符串和正则表达式
利用正则表达式进行文本匹配。

在字符串类型间，赋值运算符“=” 能将一个string变量的值赋给另一个string变量。实际上赋值运算符= 是将原字符串变量的引用复制了一份，传递给目标字符串变量，从而使得两个变量指向同一个字符串。
字符串类型是不可改变的，也就是说，当程序员试图改变一个旧的字符串时，系统在内存中创建了一个全新的字符串，并将原来的字符串引用指向新的字符串。
string.Copy() 函数 会创建一个新的字符串。

IndexOf() 可以找到指定字符，在字符串中第一次出现的位置，如果找不到指定的字符串，就返回-1.

19.4 正则表达式（Regular Expression）用于检验字符串是否满足特定规则 或 从字符串中捕获满足特定规则的子串。
普通字符
通配符

20.1 特性(Attribute) 是用来为程序元素添加额外信息的一种机制。

.NET 约定 所有特性的名称都已Attribute结尾。它预定了了200+特性，可以为代码中的程序元素提供丰富的描述信息。CLR（Common Language Runtime）通过这些描述信息控制程序元素的行为特征。
特性 也是 以类的方式实现的，一个特性就是一个类。

特性的必选参数：构造函数里定义的参数是必选参数。
特性的可选参数：特性类里的共有变量作为可选参数。
自定义的特性本质上也是一个类，在定义它的过程中，也可以被其他特性（比如，AttributeUsageAttribute）修饰。
特性作用于程序元素后，就成为程序元素的一部分。
20.2 程序集 (Assembly)是组织程序的逻辑单元。我们编写好的代码最终都会被编译器编译为若干个程序集。程序集中可以包含图像、图标及声音。

单文件程序集将它的内容都存放在一个文件中；多文件程序集则将它的内容分别放在多个文件中。不论单文件程序集还是多文件程序集，它们都由固定的结构组成。
-可执行文件 .exe : 可执行文件有一个程序入口点，单击它就可以运行。 例如，mspaint.exe
-动态链接库文件 .dll ： 动态链接库没有程序入口点，它由一组相关的类构成，只能供其他程序调用。 例如，System.Drawing.dll
mspaint.exe 调用 System.Drawing.dll; System.Drawing.dll 支持 mspaint.exe。

动态链接库
   - 早期 Win32函数库
   - .NET 框架类库

   程序集的结构，程序集是自我说明的，一个程序集可以包含多个命名空间，一个命名空间namespace可以分布在多个程序集中。

   -程序集元数据：记录了程序集的自我说明信息的核心文档，当程序运行时，Common Language Runtime 通过该程序集元数据可以获取到运行程序据所必需的全部信息。
   #标识信息（程序集的名称、版本、文化及公钥）
   #文件列表 （程序集由那些文件组成)
   #引用程序集列表（该程序集所引用的其他程序集）
   #一组许可请求（运行该程序集需要的许可）
   -类型元数据 ：列举了程序集中包含的类型信息，详细说明了程序集中定义了哪些类，每个类包含哪些属性和函数，每个函数的参数及返回值类型。
   -MSIL（Microsoft Intermediate Language）代码实现程序集的功能。
   -资源：图像、图标、声音等

   20.2.3 私有程序集和共享程序集
   .NET 类库 中的程序集 就是共享程序集，任何软件都可以方便地调用这些程序集。
   GAC (Global Assmbelys Cache)

   GUID stands for Globally Unique Identifier.
   It is a 128-bit value that is used in computer systems to identify resources
   such as files, databases, and objects in a way that
   is globally unique and does not conflict with other identifiers.

   GUIDs are designed to be globally unique, which means that they can be used to identify resources across different systems, networks, and geographic locations without the risk of conflicting with other identifiers. This is achieved by using a combination of unique identifiers,
   such as the MAC address of the network card, the current date and time, and a random number.

   20.3 反射： 通过.NET的反射机制(Reflection),我们可以轻松地获取类型和程序集信息。
   20.3.2 获取程序集信息
   在获取程序集元数据之前，需要先用Assembly对象的Load（）方法把程序集加载到内存中。
   object animalInstance = Activator.CreateInstance(AnimalType,null)
   IDrawAnimal animal = animalInstance as IDrawAnimal;

  利用反射机制实现 动态加载类型 和 动态调用方法。

21 多线程

操作系统以进程(Process)的方式运行应用程序，进程包括 应用程序的指令流、运行程序所需的内存和寄存器资源。
系统里开启三个应用程序，系统就创建了三个进程，就增加了三条执行路线。操作系统轮流执行每个进程，每个进程执行一小段时间，三个进程循环往复，交替进行。因为交替时间很短（一般只有几十毫秒）人们根本感觉不到如此短暂的停顿。

在一个进程中，我们可以创建若干个线程（Threading）,同一个进程中的所有线程共享进程的资源，所以在线程之间的切换比进程间的切换快很多。

线程是操作系统进行CPU调度的基本单位。

Thread workThread = new Thread(entryPoint);
每一个线程都需要一个入口函数，因为线程是从入口函数中的代码开始执行的。
public delegate void ThreadStart(); // 在该情况下，传递给线程的入口函数必须是没有参数和返回值的函数。

在中止线程时，Abort()方法会抛出一个ThreadAbortException异常，这样如果线程中止时，恰好正在执行try语句中的代码，就可以确保对应的finally块被执行，从而确保相应的资源被释放。

后台线程不妨碍程序的终止。一旦一个应用程序的所有前台程序都中止，Common Language Runtime 就通过调用任意一个存活中的后台进程Abort（）方法来彻底中止程序。 
21.6.1 线程的同步
无关线程：各自独立运行互不干扰的线程。
相关线程：一个线程等待另一个线程的运算结果；两个线程共享一个资源。
临界资源（Critical Resource）： 多个线程共享的资源。
临界区（Critical Region) ：访问临界资源的代码。

系统中往往有多个线程交替执行，它们被执行的时间是不确定的。因此为了保证两个线程协同工作的情况被称之为 线程同步（Synchronization）
-Interlocked
Interlocked.Decrement(ref numberOfUsedSpace);
Interlocked.Increment(ref numberOfUsedSpace);

when a parameter is passed by reference using the ref keyword,
any changes made to the parameter within a method will affect the original value outside the method.
-Monitor
只有获得独占锁的线程才能访问临界资源。
Monitor类包含的是静态方法，使用时不必创建Monitor类对象。
Monitor类只能锁定引用类型对象，而不能锁定值类型。因为当参数为值类型变量时，每调用一次Monitor.Enter()方法，
值类型变量就会进行一次装箱操作，就得到一个新的Object型对象
，因此Monitor类的不同操作发生在不同对象上，从而不能实现同步。
-Mutex
在操作系统中，线程常常需要共享资源，而这些资源往往要求排他性使用，即该资源一次只能为一个线程服务。这种排他性地使用共享资源成为线程间的互斥（Mutual Excusion）
Mutex类可以跨越应用程序边界，在多个应用程序之间进行同步。
局部互斥体：只能在创建它的程序中使用
系统互斥体：能被系统中不同的应用程序共享

死锁会导致程序停滞不前，解决该问题的办法是，只要两个线程以相同的顺序访问临界资源。

21.7 线程池
ThreadPool 是一个静态类，不必创建实例就可以使用它。一个应用程序最多只有一个线程池，它会在首次向线程池中排入工作函数时，自动创建
。线程池提高效率的关键是一个线程完成任务后可以继续为其他任务服务，这样就可以使用有限的几个固定线程轮流为大量任务服务，从而减少了因为频繁创建和销毁线程所造成的消耗。
22.1 集合：一组相互关联的对象组成集合。

所有的集合都直接或间接地实现了IEnumerable接口，foreach语句会自动调用,IEnumerable接口中的GetEnumerator()方法，从而获取集合中的元素。

当ArrayList数组列表的容量发生改变时，系统会分配新的内存空间，创建一个全新的数组列表，然后把原数组列表的内容复制到新数组列表中，之后删除原数组列表。
ArrayList把它里面所有的元素都看作Object类型（值类型变量也会被自动装箱成Object类型），因此当使用这些元素时，需要把它们显示转换为恰当的类型。
数组是读写最快的数据结构，因为数组在内存中是连续排列的，根据数组在内存中的首地址和元素的索引就可以直接计算出元素在内存中的地址。
元素在内存中的地址=数组的首地址+元素的索引*元素的大小

散列函数能够根据关键码直接计算出元素的索引，所以我们只需要进行一次比较就可以找到所需元素。.Net 采用open addressing 开地址方法 解决散列码冲突问题，首先通过散列函数计算出基位置。如果发现基位置已经被占用，就根据一定的偏移量向下寻找，知道找到空位置位置。偏移量由一定的算法产生。
.Net中所有的类都从Object类继承来GetHashCode（）方法。
Hashtable colorTable = new Hashtable(17,0.5f);
colorTable.Add(red.Name,red);
colorTable["Blue"] = new Color("Blue,0,0,255");
23 泛型

当我们用具体的类型int代替抽象类型T后，公共语言运行时（Common language runtime） 在进行JIT编译时，会用int代替泛型类中的T创造出一个以int为元素类型的新类，这被成为泛型类型的实例化(Generic Type Instantiation)
23.3 类型约束
class AnimalFamily<T> where T:Animal{
// snippet
}
特性 也是 以类的方式实现的，一个特性就是一个类。

特性的必选参数：构造函数里定义的参数是必选参数。
特性的可选参数：特性类里的共有变量作为可选参数。
自定义的特性本质上也是一个类，在定义它的过程中，也可以被其他特性（比如，AttributeUsageAttribute）修饰。
特性作用于程序元素后，就成为程序元素的一部分。
20.2 程序集 (Assembly)是组织程序的逻辑单元。我们编写好的代码最终都会被编译器编译为若干个程序集。程序集中可以包含图像、图标及声音。

单文件程序集将它的内容都存放在一个文件中；多文件程序集则将它的内容分别放在多个文件中。不论单文件程序集还是多文件程序集，它们都由固定的结构组成。
-可执行文件 .exe : 可执行文件有一个程序入口点，单击它就可以运行。 例如，mspaint.exe
-动态链接库文件 .dll ： 动态链接库没有程序入口点，它由一组相关的类构成，只能供其他程序调用。 例如，System.Drawing.dll
mspaint.exe 调用 System.Drawing.dll; System.Drawing.dll 支持 mspaint.exe。

动态链接库
   - 早期 Win32函数库
   - .NET 框架类库

   程序集的结构，程序集是自我说明的，一个程序集可以包含多个命名空间，一个命名空间namespace可以分布在多个程序集中。

   -程序集元数据：记录了程序集的自我说明信息的核心文档，当程序运行时，Common Language Runtime 通过该程序集元数据可以获取到运行程序据所必需的全部信息。
   #标识信息（程序集的名称、版本、文化及公钥）
   #文件列表 （程序集由那些文件组成)
   #引用程序集列表（该程序集所引用的其他程序集）
   #一组许可请求（运行该程序集需要的许可）
   -类型元数据 ：列举了程序集中包含的类型信息，详细说明了程序集中定义了哪些类，每个类包含哪些属性和函数，每个函数的参数及返回值类型。
   -MSIL（Microsoft Intermediate Language）代码实现程序集的功能。
   -资源：图像、图标、声音等

   20.2.3 私有程序集和共享程序集
   .NET 类库 中的程序集 就是共享程序集，任何软件都可以方便地调用这些程序集。
   GAC (Global Assmbelys Cache)

   GUID stands for Globally Unique Identifier.
   It is a 128-bit value that is used in computer systems to identify resources
   such as files, databases, and objects in a way that
   is globally unique and does not conflict with other identifiers.

   GUIDs are designed to be globally unique, which means that they can be used to identify resources across different systems, networks, and geographic locations without the risk of conflicting with other identifiers. This is achieved by using a combination of unique identifiers,
   such as the MAC address of the network card, the current date and time, and a random number.

   20.3 反射： 通过.NET的反射机制(Reflection),我们可以轻松地获取类型和程序集信息。
   20.3.2 获取程序集信息
   在获取程序集元数据之前，需要先用Assembly对象的Load（）方法把程序集加载到内存中。
   object animalInstance = Activator.CreateInstance(AnimalType,null)
   IDrawAnimal animal = animalInstance as IDrawAnimal;

   利用反射机制实现 动态加载类型 和 动态调用方法。